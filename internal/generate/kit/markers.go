package kit

import (
	"sigs.k8s.io/controller-tools/pkg/markers"
)

var (
	serviceMarker  = markers.Must(markers.MakeDefinition("kit:service", markers.DescribesType, Service{}))
	endpointMarker = markers.Must(markers.MakeDefinition("kit:endpoint", markers.DescribesType, Endpoint{}))
)

// Register registers common markers into a marker registry.
func Register(into *markers.Registry) error {
	if err := into.Register(serviceMarker); err != nil {
		return err
	}

	into.AddHelp(
		serviceMarker,
		markers.SimpleHelp("Kit", "enables code generation for a service interface"),
	)

	return nil
}

// +controllertools:marker:generateHelp:category=Kit

// Service marker provides information to generators about the service.
type Service struct {
	// BaseName specifies a base name for the service (other than the one automatically generated).
	//
	// When not specified the base name is generated by removing "Service" suffix from the type name (if any).
	BaseName string `marker:"baseName"`

	// ModuleName can be used instead of the package name as an operation name to uniquely identify a service call.
	//
	// Falls back to the package name.
	ModuleName string `marker:"moduleName,optional"`
}

// +controllertools:marker:generateHelp:category=Kit

// Endpoint marker enables generating an endpoint for a service and provides information to the generator.
type Endpoint struct {
	// BaseName specifies a base name for the service (other than the one automatically generated).
	//
	// When not specified falls back to base name specified by +kit:service marker.
	BaseName string `marker:"baseName"`

	// WithOpenCensus enables generating a TraceEndpoint middleware.
	WithOpenCensus bool `marker:"withOpenCensus,optional"`
}
