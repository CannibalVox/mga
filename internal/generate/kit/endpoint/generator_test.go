package endpoint

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGenerate(t *testing.T) {
	input := ServiceSpec{
		Name: "Service",
		Package: PackageSpec{
			Name: "todo",
			Path: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
		},
		Endpoints: []EndpointSpec{
			{
				Name: "Call",
			},
			{
				Name: "OtherCall",
			},
		},
	}

	res, err := Generate(
		"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/todogen",
		input,
		true,
		"",
		"",
	)
	if err != nil {
		t.Fatal(err)
	}

	expected := `// Code generated by mga tool. DO NOT EDIT.
package todogen

import (
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo"
)

// Endpoint name constants
const (
	CallEndpoint      = "todo.Call"
	OtherCallEndpoint = "todo.OtherCall"
)

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service todo.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		Call:      kitxendpoint.OperationNameMiddleware(CallEndpoint)(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware(OtherCallEndpoint)(mw(MakeOtherCallEndpoint(service))),
	}
}

// TraceEndpoints returns a(n) Endpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceEndpoints(endpoints Endpoints) Endpoints {
	return Endpoints{
		Call:      kitoc.TraceEndpoint("todo.Call")(endpoints.Call),
		OtherCall: kitoc.TraceEndpoint("todo.OtherCall")(endpoints.OtherCall),
	}
}
`

	assert.Equal(t, expected, res, "the generated code does not match the expected one")
}

func TestGenerate_WithOcRoot(t *testing.T) {
	input := ServiceSpec{
		Name: "Service",
		Package: PackageSpec{
			Name: "todo",
			Path: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
		},
		Endpoints: []EndpointSpec{
			{
				Name: "Call",
			},
			{
				Name: "OtherCall",
			},
		},
	}

	res, err := Generate(
		"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/todogen",
		input,
		true,
		"path/to/pkg",
		"",
	)
	if err != nil {
		t.Fatal(err)
	}

	expected := `// Code generated by mga tool. DO NOT EDIT.
package todogen

import (
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo"
)

// Endpoint name constants
const (
	CallEndpoint      = "todo.Call"
	OtherCallEndpoint = "todo.OtherCall"
)

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service todo.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		Call:      kitxendpoint.OperationNameMiddleware(CallEndpoint)(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware(OtherCallEndpoint)(mw(MakeOtherCallEndpoint(service))),
	}
}

// TraceEndpoints returns a(n) Endpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceEndpoints(endpoints Endpoints) Endpoints {
	return Endpoints{
		Call:      kitoc.TraceEndpoint("path/to/pkg.Call")(endpoints.Call),
		OtherCall: kitoc.TraceEndpoint("path/to/pkg.OtherCall")(endpoints.OtherCall),
	}
}
`

	assert.Equal(t, expected, res, "the generated code does not match the expected one")
}

func TestGenerate_WithBase_name(t *testing.T) {
	input := ServiceSpec{
		Name: "Service",
		Package: PackageSpec{
			Name: "todo",
			Path: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
		},
		Endpoints: []EndpointSpec{
			{
				Name: "Call",
			},
			{
				Name: "OtherCall",
			},
		},
	}

	res, err := Generate(
		"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/todogen",
		input,
		true,
		"",
		"Todo",
	)
	if err != nil {
		t.Fatal(err)
	}

	expected := `// Code generated by mga tool. DO NOT EDIT.
package todogen

import (
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo"
)

// Endpoint name constants
const (
	CallTodoEndpoint      = "todo.Call"
	OtherCallTodoEndpoint = "todo.OtherCall"
)

// TodoEndpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type TodoEndpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeTodoEndpoints returns a(n) TodoEndpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeTodoEndpoints(service todo.Service, middleware ...endpoint.Middleware) TodoEndpoints {
	mw := kitxendpoint.Combine(middleware...)

	return TodoEndpoints{
		Call:      kitxendpoint.OperationNameMiddleware(CallTodoEndpoint)(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware(OtherCallTodoEndpoint)(mw(MakeOtherCallEndpoint(service))),
	}
}

// TraceTodoEndpoints returns a(n) TodoEndpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceTodoEndpoints(endpoints TodoEndpoints) TodoEndpoints {
	return TodoEndpoints{
		Call:      kitoc.TraceEndpoint("todo.Call")(endpoints.Call),
		OtherCall: kitoc.TraceEndpoint("todo.OtherCall")(endpoints.OtherCall),
	}
}
`

	assert.Equal(t, expected, res, "the generated code does not match the expected one")
}
