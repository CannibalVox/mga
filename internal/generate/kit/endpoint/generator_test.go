package endpoint

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"sagikazarmark.dev/mga/pkg/gentypes"
)

func TestGenerate(t *testing.T) {
	file := File{
		File: gentypes.File{
			HeaderText: `// Copyright 2020 Acme Inc.
// All rights reserved.
//
// Licensed under "Only for testing purposes" license.
`,
			Package: gentypes.PackageRef{
				Name: "pkgdriver",
				Path: "app.dev/pkg/pkdriver",
			},
		},
		EndpointSets: []EndpointSet{
			{
				Name: "",
				Service: gentypes.TypeRef{
					Name: "Service",
					Package: gentypes.PackageRef{
						Name: "pkg",
						Path: "app.dev/pkg",
					},
				},
				Endpoints: []Endpoint{
					{
						Name:          "Call",
						OperationName: "pkg.Call",
					},
					{
						Name:          "OtherCall",
						OperationName: "pkg.OtherCall",
					},
				},
				WithOpenCensus: true,
			},
			{
				Name: "Other",
				Service: gentypes.TypeRef{
					Name: "OtherService",
					Package: gentypes.PackageRef{
						Name: "pkg",
						Path: "app.dev/pkg",
					},
				},
				Endpoints: []Endpoint{
					{
						Name:          "Call",
						OperationName: "pkg.Other.Call",
					},
					{
						Name:          "OtherCall",
						OperationName: "pkg.Other.OtherCall",
					},
				},
				WithOpenCensus: false,
			},
			{
				Name: "Another",
				Service: gentypes.TypeRef{
					Name: "Another",
					Package: gentypes.PackageRef{
						Name: "pkg",
						Path: "app.dev/pkg",
					},
				},
				Endpoints: []Endpoint{
					{
						Name:          "CreateAnother",
						OperationName: "path/to/pkg.Another.CreateAnother",
					},
					{
						Name:          "UpdateAnother",
						OperationName: "path/to/pkg.Another.UpdateAnother",
					},
				},
				WithOpenCensus: false,
			},
		},
	}

	// nolint: lll
	expected := `// +build !ignore_autogenerated

// Copyright 2020 Acme Inc.
// All rights reserved.
//
// Licensed under "Only for testing purposes" license.

// Code generated by mga tool. DO NOT EDIT.

package pkgdriver

import (
	"app.dev/pkg"
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service pkg.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		Call:      kitxendpoint.OperationNameMiddleware("pkg.Call")(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware("pkg.OtherCall")(mw(MakeOtherCallEndpoint(service))),
	}
}

// TraceEndpoints returns a(n) Endpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceEndpoints(endpoints Endpoints) Endpoints {
	return Endpoints{
		Call:      kitoc.TraceEndpoint("pkg.Call")(endpoints.Call),
		OtherCall: kitoc.TraceEndpoint("pkg.OtherCall")(endpoints.OtherCall),
	}
}

// OtherEndpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type OtherEndpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeOtherEndpoints returns a(n) OtherEndpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeOtherEndpoints(service pkg.OtherService, middleware ...endpoint.Middleware) OtherEndpoints {
	mw := kitxendpoint.Combine(middleware...)

	return OtherEndpoints{
		Call:      kitxendpoint.OperationNameMiddleware("pkg.Other.Call")(mw(MakeCallOtherEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware("pkg.Other.OtherCall")(mw(MakeOtherCallOtherEndpoint(service))),
	}
}

// AnotherEndpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type AnotherEndpoints struct {
	CreateAnother endpoint.Endpoint
	UpdateAnother endpoint.Endpoint
}

// MakeAnotherEndpoints returns a(n) AnotherEndpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeAnotherEndpoints(service pkg.Another, middleware ...endpoint.Middleware) AnotherEndpoints {
	mw := kitxendpoint.Combine(middleware...)

	return AnotherEndpoints{
		CreateAnother: kitxendpoint.OperationNameMiddleware("path/to/pkg.Another.CreateAnother")(mw(MakeCreateAnotherAnotherEndpoint(service))),
		UpdateAnother: kitxendpoint.OperationNameMiddleware("path/to/pkg.Another.UpdateAnother")(mw(MakeUpdateAnotherAnotherEndpoint(service))),
	}
}
`

	actual, err := Generate(file)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, expected, string(actual), "the generated code does not match the expected")
}

func TestGenerate_Unique(t *testing.T) {
	file := File{
		File: gentypes.File{
			HeaderText: `// Copyright 2020 Acme Inc.
// All rights reserved.
//
// Licensed under "Only for testing purposes" license.
`,
			Package: gentypes.PackageRef{
				Name: "pkgdriver",
				Path: "app.dev/pkg/pkdriver",
			},
		},
		EndpointSets: []EndpointSet{
			{
				Name: "",
				Service: gentypes.TypeRef{
					Name: "Service",
					Package: gentypes.PackageRef{
						Name: "pkg",
						Path: "app.dev/pkg",
					},
				},
				Endpoints: []Endpoint{
					{
						Name:          "Call",
						OperationName: "pkg.Call",
					},
					{
						Name:          "OtherCall",
						OperationName: "pkg.OtherCall",
					},
				},
				WithOpenCensus: true,
			},
			{
				Name: "Other",
				Service: gentypes.TypeRef{
					Name: "OtherService",
					Package: gentypes.PackageRef{
						Name: "pkg",
						Path: "app.dev/pkg",
					},
				},
				Endpoints: []Endpoint{
					{
						Name:          "AnotherCall",
						OperationName: "pkg.Other.AnotherCall",
					},
					{
						Name:          "YetAnotherCall",
						OperationName: "pkg.Other.YetAnotherCall",
					},
				},
				WithOpenCensus: false,
			},
		},
	}

	// nolint: lll
	expected := `// +build !ignore_autogenerated

// Copyright 2020 Acme Inc.
// All rights reserved.
//
// Licensed under "Only for testing purposes" license.

// Code generated by mga tool. DO NOT EDIT.

package pkgdriver

import (
	"app.dev/pkg"
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service pkg.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		Call:      kitxendpoint.OperationNameMiddleware("pkg.Call")(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware("pkg.OtherCall")(mw(MakeOtherCallEndpoint(service))),
	}
}

// TraceEndpoints returns a(n) Endpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceEndpoints(endpoints Endpoints) Endpoints {
	return Endpoints{
		Call:      kitoc.TraceEndpoint("pkg.Call")(endpoints.Call),
		OtherCall: kitoc.TraceEndpoint("pkg.OtherCall")(endpoints.OtherCall),
	}
}

// OtherEndpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type OtherEndpoints struct {
	AnotherCall    endpoint.Endpoint
	YetAnotherCall endpoint.Endpoint
}

// MakeOtherEndpoints returns a(n) OtherEndpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeOtherEndpoints(service pkg.OtherService, middleware ...endpoint.Middleware) OtherEndpoints {
	mw := kitxendpoint.Combine(middleware...)

	return OtherEndpoints{
		AnotherCall:    kitxendpoint.OperationNameMiddleware("pkg.Other.AnotherCall")(mw(MakeAnotherCallEndpoint(service))),
		YetAnotherCall: kitxendpoint.OperationNameMiddleware("pkg.Other.YetAnotherCall")(mw(MakeYetAnotherCallEndpoint(service))),
	}
}
`

	actual, err := Generate(file)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, expected, string(actual), "the generated code does not match the expected")
}
