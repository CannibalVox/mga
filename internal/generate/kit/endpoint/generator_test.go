package endpoint

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGenerate(t *testing.T) {
	tests := []struct {
		name     string
		def      PackageDefinition
		expected string
	}{
		{
			name: "Generate",
			def: PackageDefinition{
				HeaderText:  "",
				PackageName: "tododriver",
				PackagePath: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/tododriver",
				EndpointSets: []EndpointSetDefinition{
					{
						BaseName: "",
						Service: ServiceDefinition{
							Name:        "Service",
							PackagePath: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
							PackageName: "todo",
						},
						Endpoints: []EndpointDefinition{
							{
								Name:          "Call",
								OperationName: "todo.Call",
							},
							{
								Name:          "OtherCall",
								OperationName: "todo.OtherCall",
							},
						},
						WithOpenCensus: true,
					},
				},
			},
			expected: `// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package tododriver

import (
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo"
)

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service todo.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		Call:      kitxendpoint.OperationNameMiddleware("todo.Call")(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware("todo.OtherCall")(mw(MakeOtherCallEndpoint(service))),
	}
}

// TraceEndpoints returns a(n) Endpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceEndpoints(endpoints Endpoints) Endpoints {
	return Endpoints{
		Call:      kitoc.TraceEndpoint("todo.Call")(endpoints.Call),
		OtherCall: kitoc.TraceEndpoint("todo.OtherCall")(endpoints.OtherCall),
	}
}
`,
		},
		{
			name: "CustomOperationName",
			def: PackageDefinition{
				HeaderText:  "",
				PackageName: "tododriver",
				PackagePath: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/tododriver",
				EndpointSets: []EndpointSetDefinition{
					{
						BaseName: "",
						Service: ServiceDefinition{
							Name:        "Service",
							PackagePath: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
							PackageName: "todo",
						},
						Endpoints: []EndpointDefinition{
							{
								Name:          "Call",
								OperationName: "path/to/todo.Call",
							},
							{
								Name:          "OtherCall",
								OperationName: "path/to/todo.OtherCall",
							},
						},
						WithOpenCensus: false,
					},
				},
			},
			expected: `// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package tododriver

import (
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo"
)

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service todo.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		Call:      kitxendpoint.OperationNameMiddleware("path/to/todo.Call")(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware("path/to/todo.OtherCall")(mw(MakeOtherCallEndpoint(service))),
	}
}
`,
		},
		{
			name: "MultipleSets",
			def: PackageDefinition{
				HeaderText:  "",
				PackageName: "tododriver",
				PackagePath: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/tododriver",
				EndpointSets: []EndpointSetDefinition{
					{
						BaseName: "",
						Service: ServiceDefinition{
							Name:        "Service",
							PackagePath: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
							PackageName: "todo",
						},
						Endpoints: []EndpointDefinition{
							{
								Name:          "Call",
								OperationName: "todo.Call",
							},
							{
								Name:          "OtherCall",
								OperationName: "todo.OtherCall",
							},
						},
						WithOpenCensus: false,
					},
					{
						BaseName: "Other",
						Service: ServiceDefinition{
							Name:        "OtherService",
							PackagePath: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
							PackageName: "todo",
						},
						Endpoints: []EndpointDefinition{
							{
								Name:          "Call",
								OperationName: "todo.Other.Call",
							},
							{
								Name:          "OtherCall",
								OperationName: "todo.Other.OtherCall",
							},
						},
						WithOpenCensus: true,
					},
				},
			},
			expected: `// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package tododriver

import (
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo"
)

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service todo.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		Call:      kitxendpoint.OperationNameMiddleware("todo.Call")(mw(MakeCallEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware("todo.OtherCall")(mw(MakeOtherCallEndpoint(service))),
	}
}

// OtherEndpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type OtherEndpoints struct {
	Call      endpoint.Endpoint
	OtherCall endpoint.Endpoint
}

// MakeOtherEndpoints returns a(n) OtherEndpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeOtherEndpoints(service todo.OtherService, middleware ...endpoint.Middleware) OtherEndpoints {
	mw := kitxendpoint.Combine(middleware...)

	return OtherEndpoints{
		Call:      kitxendpoint.OperationNameMiddleware("todo.Other.Call")(mw(MakeCallOtherEndpoint(service))),
		OtherCall: kitxendpoint.OperationNameMiddleware("todo.Other.OtherCall")(mw(MakeOtherCallOtherEndpoint(service))),
	}
}

// TraceOtherEndpoints returns a(n) OtherEndpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceOtherEndpoints(endpoints OtherEndpoints) OtherEndpoints {
	return OtherEndpoints{
		Call:      kitoc.TraceEndpoint("todo.Other.Call")(endpoints.Call),
		OtherCall: kitoc.TraceEndpoint("todo.Other.OtherCall")(endpoints.OtherCall),
	}
}
`,
		},
	}

	for _, test := range tests {
		test := test

		t.Run(test.name, func(t *testing.T) {
			res, err := Generate(test.def)
			if err != nil {
				t.Fatal(err)
			}

			assert.Equal(t, test.expected, string(res), "the generated code does not match the expected one")
		})
	}
}
