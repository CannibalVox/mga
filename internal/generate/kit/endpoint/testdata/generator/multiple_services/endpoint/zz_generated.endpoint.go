// +build !ignore_autogenerated

// Copyright 2020 Acme Inc.
// All rights reserved.
//
// Licensed under "Only for testing purposes" license.

// Code generated by mga tool. DO NOT EDIT.

package pkgdriver

import (
	"context"
	"errors"
	"github.com/go-kit/kit/endpoint"
	kitoc "github.com/go-kit/kit/tracing/opencensus"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
	"sagikazarmark.dev/mga/internal/generate/kit/endpoint/testdata/generator/multiple_services"
)

// endpointError identifies an error that should be returned as an error endpoint.
type endpointError interface {
	EndpointError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	Call endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service multiple_services.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{Call: kitxendpoint.OperationNameMiddleware("multiple_services.Call")(mw(MakeCallEndpoint(service)))}
}

// TraceEndpoints returns a(n) Endpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceEndpoints(endpoints Endpoints) Endpoints {
	return Endpoints{Call: kitoc.TraceEndpoint("multiple_services.Call")(endpoints.Call)}
}

// CallRequest is a request struct for Call endpoint.
type CallRequest struct {
	Param string
}

// CallResponse is a response struct for Call endpoint.
type CallResponse struct {
	Id  string
	Err error
}

// MakeCallEndpoint returns an endpoint for the matching method of the underlying service.
func MakeCallEndpoint(service multiple_services.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CallRequest)

		id, err := service.Call(ctx, req.Param)

		if err != nil {
			if endpointErr := endpointError(nil); errors.As(err, &endpointErr) && endpointErr.EndpointError() {
				return &CallResponse{
					Err: err,
					Id:  id,
				}, err
			}

			return &CallResponse{
				Err: err,
				Id:  id,
			}, nil
		}

		return &CallResponse{Id: id}, nil
	}
}

// OtherEndpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type OtherEndpoints struct {
	Call endpoint.Endpoint
}

// MakeOtherEndpoints returns a(n) OtherEndpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeOtherEndpoints(service multiple_services.OtherService, middleware ...endpoint.Middleware) OtherEndpoints {
	mw := kitxendpoint.Combine(middleware...)

	return OtherEndpoints{Call: kitxendpoint.OperationNameMiddleware("multiple_services.Other.Call")(mw(MakeCallOtherEndpoint(service)))}
}

// TraceOtherEndpoints returns a(n) OtherEndpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceOtherEndpoints(endpoints OtherEndpoints) OtherEndpoints {
	return OtherEndpoints{Call: kitoc.TraceEndpoint("multiple_services.Other.Call")(endpoints.Call)}
}

// CallOtherRequest is a request struct for Call endpoint.
type CallOtherRequest struct{}

// CallOtherResponse is a response struct for Call endpoint.
type CallOtherResponse struct {
	Err error
}

// MakeCallOtherEndpoint returns an endpoint for the matching method of the underlying service.
func MakeCallOtherEndpoint(service multiple_services.OtherService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CallOtherRequest)

		err := service.Call(ctx)

		if err != nil {
			if endpointErr := endpointError(nil); errors.As(err, &endpointErr) && endpointErr.EndpointError() {
				return &CallOtherResponse{Err: err}, err
			}

			return &CallOtherResponse{Err: err}, nil
		}

		return &CallOtherResponse{}, nil
	}
}

// AnotherEndpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type AnotherEndpoints struct {
	Call endpoint.Endpoint
}

// MakeAnotherEndpoints returns a(n) AnotherEndpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeAnotherEndpoints(service multiple_services.Another, middleware ...endpoint.Middleware) AnotherEndpoints {
	mw := kitxendpoint.Combine(middleware...)

	return AnotherEndpoints{Call: kitxendpoint.OperationNameMiddleware("multiple_services.Another.Call")(mw(MakeCallAnotherEndpoint(service)))}
}

// TraceAnotherEndpoints returns a(n) AnotherEndpoints struct where each endpoint is wrapped with a tracing middleware.
func TraceAnotherEndpoints(endpoints AnotherEndpoints) AnotherEndpoints {
	return AnotherEndpoints{Call: kitoc.TraceEndpoint("multiple_services.Another.Call")(endpoints.Call)}
}

// CallAnotherRequest is a request struct for Call endpoint.
type CallAnotherRequest struct{}

// CallAnotherResponse is a response struct for Call endpoint.
type CallAnotherResponse struct {
	Err error
}

// MakeCallAnotherEndpoint returns an endpoint for the matching method of the underlying service.
func MakeCallAnotherEndpoint(service multiple_services.Another) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*CallAnotherRequest)

		err := service.Call(ctx)

		if err != nil {
			if endpointErr := endpointError(nil); errors.As(err, &endpointErr) && endpointErr.EndpointError() {
				return &CallAnotherResponse{Err: err}, err
			}

			return &CallAnotherResponse{Err: err}, nil
		}

		return &CallAnotherResponse{}, nil
	}
}
