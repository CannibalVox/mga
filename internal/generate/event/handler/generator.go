package handler

import (
	"bytes"

	"github.com/dave/jennifer/jen"
)

// Generate generates an event handler.
func Generate(pkg string, spec EventSpec) (string, error) {
	handlerTypeName := spec.Name + "Handler"
	eventHandlerTypeName := spec.Name + "EventHandler"

	const (
		handlerVarName     = "handler"
		handlerNameVarName = "name"
	)

	file := jen.NewFilePath(pkg)

	file.PackageComment("Code generated by mga tool. DO NOT EDIT.")

	file.ImportName("emperror.dev/errors", "errors")
	file.ImportName(spec.Package.Path, spec.Package.Name)

	file.Commentf("%s handles %s events.", handlerTypeName, spec.Name)
	file.Type().Id(handlerTypeName).Interface(
		jen.Commentf("%s handles a(n) %s event.", spec.Name, spec.Name),
		jen.Id(spec.Name).Params(
			jen.Id("ctx").Qual("context", "Context"),
			jen.Id("event").Qual(spec.Package.Path, spec.Name),
		).Error(),
	).Line()

	file.Commentf("%s handles %s events.", eventHandlerTypeName, spec.Name)
	file.Type().Id(eventHandlerTypeName).Struct(
		jen.Id(handlerVarName).Id(handlerTypeName),
		jen.Id(handlerNameVarName).String(),
	).Line()

	file.Commentf("New%s returns a new %s instance.", eventHandlerTypeName, eventHandlerTypeName)
	file.Func().
		Id("New"+eventHandlerTypeName).
		Params(
			jen.Id(handlerVarName).Id(handlerTypeName),
			jen.Id(handlerNameVarName).String(),
		).
		Id(eventHandlerTypeName).
		Block(
			jen.Return(
				jen.Id(eventHandlerTypeName).Values(jen.Dict{
					jen.Id(handlerVarName):     jen.Id(handlerVarName),
					jen.Id(handlerNameVarName): jen.Id(handlerNameVarName),
				}),
			),
		).
		Line()

	file.Comment("HandlerName returns the name of the event handler.")
	file.Func().
		Params(
			jen.Id("h").Id(eventHandlerTypeName),
		).
		Id("HandlerName").
		Params().
		Params(jen.String()).
		Block(jen.Return(jen.Id("h").Dot(handlerNameVarName)))

	file.Comment("NewEvent returns a new empty event used for serialization.")
	file.Func().
		Params(
			jen.Id("h").Id(eventHandlerTypeName),
		).
		Id("NewEvent").
		Params().
		Params(jen.Interface()).
		Block(jen.Return(jen.Op("&").Qual(spec.Package.Path, spec.Name).Values()))

	file.Comment("Handle handles an event.")
	file.Func().
		Params(
			jen.Id("h").Id(eventHandlerTypeName),
		).
		Id("Handle").
		Params(
			jen.Id("ctx").Qual("context", "Context"),
			jen.Id("event").Interface(),
		).
		Params(jen.Error()).
		Block(
			jen.List(jen.Id("e"), jen.Id("ok")).
				Op(":=").
				Id("event").
				Assert(jen.Op("*").Qual(spec.Package.Path, spec.Name)),
			jen.If(jen.Op("!").Id("ok")).Block(
				jen.Return(
					jen.Qual("emperror.dev/errors", "NewWithDetails").Call(
						jen.Lit("unexpected event type"),
						jen.Lit("type"),
						jen.Qual("fmt", "Sprintf").Call(
							jen.Lit("%T"),
							jen.Id("event"),
						),
					),
				),
			),
			jen.Line(),
			jen.Return(
				jen.Id("h").Dot(handlerVarName).Dot(spec.Name).Call(
					jen.Id("ctx"),
					jen.Op("*").Id("e"),
				),
			),
		)

	var buf bytes.Buffer

	err := file.Render(&buf)

	return buf.String(), err
}
