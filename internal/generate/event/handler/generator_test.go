package handler

import (
	"testing"
)

func TestGenerate(t *testing.T) {
	input := EventSpec{
		Name: "Event",
		Package: PackageSpec{
			Name: "todo",
			Path: "github.com/sagikazarmark/modern-go-application/internal/app/mga/todo",
		},
	}

	res, err := Generate("github.com/sagikazarmark/modern-go-application/internal/app/mga/todo/todogen", input)
	if err != nil {
		t.Fatal(err)
	}

	expected := `// Code generated by mga tool. DO NOT EDIT.
package todogen

import (
	"context"
	"emperror.dev/errors"
	"fmt"
	"github.com/sagikazarmark/modern-go-application/internal/app/mga/todo"
)

// EventHandler handles Event events.
type EventHandler interface {
	// Event handles a(n) Event event.
	Event(ctx context.Context, event todo.Event) error
}

// EventEventHandler handles Event events.
type EventEventHandler struct {
	handler EventHandler
	name    string
}

// NewEventEventHandler returns a new EventEventHandler instance.
func NewEventEventHandler(handler EventHandler, name string) EventEventHandler {
	return EventEventHandler{
		handler: handler,
		name:    name,
	}
}

// HandlerName returns the name of the event handler.
func (h EventEventHandler) HandlerName() string {
	return h.name
}

// NewEvent returns a new empty event used for serialization.
func (h EventEventHandler) NewEvent() interface{} {
	return &todo.Event{}
}

// Handle handles an event.
func (h EventEventHandler) Handle(ctx context.Context, event interface{}) error {
	e, ok := event.(*todo.Event)
	if !ok {
		return errors.NewWithDetails("unexpected event type", "type", fmt.Sprintf("%T", event))
	}

	return h.handler.Event(ctx, *e)
}
`

	if res != expected {
		t.Error("the generated code does not match the expected one")
	}
}
